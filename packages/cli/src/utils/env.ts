import fs from 'fs'
import type { CreateEnvFileInput, Env, PushEnvFileInput, VariablesCreateInput } from '@shelve/types'
import { spinner } from '@clack/prompts'
import { getConfig, loadShelveConfig } from './config'
import { useApi } from './api'
import { onCancel } from './index'

const s = spinner()

export function isEnvFileExist(envFileName: string): boolean {
  return fs.existsSync(envFileName)
}

export async function getKeyValue(key: string): Promise<string> {
  const { config } = await getConfig()
  const { envFileName } = config
  const envFile = await getEnvFile()
  const value = envFile.find((item) => item.key === key)?.value
  if (!value) {
    onCancel(`Key ${key} not found in ${envFileName}`)
  }
  return value
}

export async function mergeEnvFile(variables: Env[] = []): Promise<void> {
  const { config } = await getConfig()
  const { envFileName } = config
  s.start(`Merging ${envFileName} file`)
  const envFile = await getEnvFile()
  envFile.push(...variables)
  const content = envFile.map((item) => `${ item.key }=${ item.value }`).join('\n')
  const finalString = `# Generated by Shelve CLI\n${content}`
  fs.writeFileSync(envFileName, finalString, { encoding: 'utf8' })
  s.stop(`Merging ${envFileName} file`)
}

export async function createEnvFile(input: CreateEnvFileInput): Promise<void> {
  const { method, envFileName, variables } = input
  const envFileExist = isEnvFileExist(envFileName)
  try {
    if (envFileExist && method === 'merge') {
      await mergeEnvFile(variables)
      return
    }
    s.start(`Creating ${envFileName} file`)
    const content = variables.map((item) => `${ item.key }=${ item.value }`).join('\n')
    const finalString = `# Generated by Shelve CLI\n${content}`
    if (envFileExist) fs.unlinkSync(envFileName)
    fs.writeFileSync(envFileName, finalString)
    s.stop(`Creating ${envFileName} file`)
  } catch (e) {
    onCancel(`Failed to create ${ envFileName } file`)
  }
}

export async function getEnvFile(): Promise<Env[]> {
  const { config } = await getConfig()
  const { envFileName } = config
  const isExist = fs.existsSync(envFileName)
  if (isExist) {
    const envFile = fs.readFileSync(envFileName, 'utf8')
    const envFileContent = envFile.split('\n').filter((item) => item && !item.startsWith('#')).join('\n')
    if (!envFileContent) return []
    return envFileContent.split('\n').map((item) => {
      const [key, value] = item.split('=')
      if (!key || !value) {
        onCancel(`${ envFileName } file is invalid`)
      }
      return { key, value }
    })
  }
  return []
}

export async function getEnvVariables(projectId: number, environment: string): Promise<Env[]> {
  const api = await useApi()

  s.start('Fetching variables')
  try {
    const variables = await api(`/variable/${projectId}/${environment}`)
    s.stop('Fetching variables')
    return variables
  } catch (e) {
    onCancel('Failed to fetch variables')
  }
}

export async function pushEnvFile(input: PushEnvFileInput): Promise<void> {
  const { variables, projectId, environment } = input
  const api = await useApi()

  s.start('Pushing variables')
  try {
    const body: VariablesCreateInput = {
      method: 'overwrite',
      projectId,
      environment,
      variables: variables.map((variable) => ({
        key: variable.key,
        value: variable.value,
        projectId,
        environment
      }))
    }
    await api(`/variable`, { method: 'POST', body })
    s.stop('Pushing variables')
  } catch (e) {
    onCancel('Failed to push variables')
  }
}

export async function generateEnvExampleFile(): Promise<void> {
  const { envFileName } = await loadShelveConfig()
  const envExampleFile = `${envFileName}.example`

  s.start(`Generating ${envExampleFile} file`)

  try {
    const variables = await getEnvFile()
    const keys = variables.map((variable) => variable.key)

    fs.writeFileSync(envExampleFile, `# Generated by Shelve CLI\n${keys.map((key) => `${key}=your_value`).join('\n')}`)
    s.stop(`Generating ${envExampleFile} file`)
  } catch (e) {
    onCancel(`Failed to generate ${envExampleFile} file`)
  }
}
