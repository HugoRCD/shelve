generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamRole {
  OWNER
  ADMIN
  DEVELOPER
}

enum Role {
  ADMIN
  USER
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  avatar     String     @default("https://i.imgur.com/6VBx3io.png") @db.VarChar(500)
  role       Role       @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  projects   Project[]
  members    Member[]
  token      Token[]
  teammates  Teammate[] @relation("UserTeammates")
  teammateOf Teammate[] @relation("UserTeammateOf")
}

model Member {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  role      TeamRole @default(DEVELOPER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  projects  Project[]
}

model Project {
  id             Int         @id @default(autoincrement())
  name           String
  description    String?
  repository     String?
  projectManager String?
  homepage       String?
  variablePrefix String?
  avatar         String?     @db.VarChar(500)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  ownerId        Int
  variables      Variables[]
  users          User[]
  teamId         Int?
  team           Team?       @relation(fields: [teamId], references: [id])

  @@index([name], name: "project_name_index")
}

model Variables {
  id          Int      @id @default(autoincrement())
  key         String
  value       String
  environment String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
}

model Token {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(500)
  token     String   @unique @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teammate {
  id         Int      @id @default(autoincrement())
  userId     Int
  teammateId Int
  count      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserTeammates", fields: [userId], references: [id], onDelete: Cascade)
  teammate   User     @relation("UserTeammateOf", fields: [teammateId], references: [id], onDelete: Cascade)

  @@unique([userId, teammateId])
}
