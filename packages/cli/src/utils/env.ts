import fs from 'fs'
import type { Env } from '@shelve/types'
import { cancel } from '@clack/prompts'
import consola from 'consola'
import { loadShelveConfig } from './config'

export async function isEnvFileExist(): boolean {
  const { envFileName } = await loadShelveConfig()
  return fs.existsSync(`${ envFileName }`)
}

export async function mergeEnvFile(variables: Env = []): void {
  const { envFileName } = await loadShelveConfig()
  const envFile = await getEnvFile()
  envFile.push(...variables)
  const content = envFile.map((item) => `${ item.key }=${ item.value }`).join('\n')
  const finalString = `# Generated by Shelve CLI\n${content}`
  fs.writeFileSync(envFileName, finalString)
  consola.success(`${ envFileName } file updated successfully`)
}

export async function createEnvFile(variables: Env = []): void {
  const { pullMethod, envFileName } = await loadShelveConfig()
  if (isEnvFileExist() && pullMethod === 'merge') {
    await mergeEnvFile(variables)
    return
  }
  const content = variables.map((item) => `${ item.key }=${ item.value }`).join('\n')
  const finalString = `# Generated by Shelve CLI\n${content}`
  if (isEnvFileExist()) fs.unlinkSync(envFileName)
  fs.writeFileSync(envFileName, finalString)
  consola.success(`${ envFileName } file created successfully`)
}

export async function getEnvFile(): Promise<Env[]> {
  const { envFileName } = await loadShelveConfig()
  const isExist = fs.existsSync(envFileName)
  if (isExist) {
    const envFile = fs.readFileSync(envFileName, 'utf8')
    const envFileContent = envFile.split('\n').filter((item) => item && !item.startsWith('#')).join('\n')
    return envFileContent.split('\n').map((item) => {
      const [key, value] = item.split('=')
      if (!key || !value) {
        cancel(`${ envFileName } file is invalid`)
        process.exit(0)
      }
      return { key, value }
    })
  }
  return []
}
