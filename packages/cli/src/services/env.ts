import {
  EnvVar,
  CreateEnvFileInput,
  PushEnvFileInput,
  CreateVariablesInput,
  GetEnvVariables
} from '@shelve/types'
import { parseEnvFile } from '@shelve/utils'
import { log } from '@clack/prompts'
import { loadShelveConfig, askBoolean } from '../utils'
import { FileService } from './file'
import { BaseService } from './base'

export class EnvService extends BaseService {

  static formatEnvContent(variables: EnvVar[]): string {
    const content = variables
      .map((item) => `${item.key}=${item.value}`)
      .join('\n')
    return `# Generated by Shelve CLI\n${content}`
  }

  static async getEnvFile(): Promise<EnvVar[]> {
    const { envFileName } = await loadShelveConfig()

    if (FileService.exists(envFileName)) {
      const envFile = FileService.read(envFileName)
      return parseEnvFile(envFile)
    }
    FileService.write(envFileName, '')
    return []
  }

  static async createEnvFile(input: CreateEnvFileInput): Promise<void> {
    const { envFileName, variables, confirmChanges } = input

    if (confirmChanges)
      await askBoolean(`Are you sure you want to update ${envFileName} file?`)

    await this.withLoading(`Creating ${envFileName} file`, async () => {
      const content = this.formatEnvContent(variables)

      if (FileService.exists(envFileName)) FileService.delete(envFileName)

      FileService.write(envFileName, content)

      // TODO: make withLoading work without setTimeout
      await new Promise((resolve) => setTimeout(resolve, 10))
    })
  }

  static getEnvVariables(input: GetEnvVariables): Promise<EnvVar[]> {
    const { project, environmentId, slug } = input
    return this.withLoading('Fetching variables', () => {
      return this.request<EnvVar[]>(`/teams/${slug}/projects/${project.id}/variables/env/${environmentId}`)
    })
  }

  static async pushEnvFile(input: PushEnvFileInput): Promise<boolean> {
    const { variables, project, slug, environment, confirmChanges, autoUppercase } = input

    if (variables.length === 0) {
      log.warn('No variables found in the .env file')
      return false
    }

    if (confirmChanges)
      await askBoolean(`Are you sure you want to push ${variables.length} variables to ${environment.name} environment?`)

    await this.withLoading('Pushing variables', async () => {
      const body: CreateVariablesInput = {
        projectId: project.id,
        autoUppercase,
        environmentIds: [environment.id],
        variables: variables.map((variable) => ({
          key: variable.key,
          value: variable.value
        }))
      }
      await this.request<EnvVar[]>(`/teams/${slug}/projects/${project.id}/variables`, {
        method: 'POST',
        body
      })
    })

    return true
  }

  static async generateEnvExampleFile(): Promise<void> {
    const { envFileName } = await loadShelveConfig()
    const envExampleFile = `${envFileName}.example`

    await this.withLoading(`Generating ${envExampleFile} file`, async () => {
      const variables = await this.getEnvFile()
      const keys = variables.map((variable) => variable.key)

      FileService.write(envExampleFile, this.formatEnvContent(keys.map((key) => ({ key, value: 'your_value' }))))
    })
  }

}
