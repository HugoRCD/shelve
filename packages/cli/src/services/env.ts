import fs from 'fs'
import type { EnvVar, CreateEnvFileInput, PushEnvFileInput, CreateVariablesInput } from '@shelve/types'
import { spinner } from '@clack/prompts'
import { parseEnvFile } from '@shelve/utils'
import { ofetch } from 'ofetch'
import { loadShelveConfig, askBoolean, useSpinner } from '../utils'
import { ErrorHandler } from '../utils/error-handler'
import { FileService } from './file'
import { ApiService } from './api'

const s = spinner()

export class EnvService {

  private static getApi(): Promise<typeof ofetch> {
    return ApiService.initialize()
  }

  static formatEnvContent(variables: EnvVar[]): string {
    const content = variables
      .map((item) => `${item.key}=${item.value}`)
      .join('\n')
    return `# Generated by Shelve CLI\n${content}`
  }

  static async getKeyValue(key: string): Promise<string> {
    const { envFileName } = await loadShelveConfig(false)
    const envFile = await this.getEnvFile()
    const value = envFile.find((item) => item.key === key)?.value

    if (!value) {
      if (key === 'SHELVE_TOKEN') return await ApiService.getToken()
      throw new Error(`Key ${key} not found in ${envFileName}`)
    }

    return value
  }

  static async getEnvFile(): Promise<EnvVar[]> {
    const { envFileName } = await loadShelveConfig(false)

    if (FileService.exists(envFileName)) {
      const envFile = FileService.read(envFileName)
      return parseEnvFile(envFile)
    }

    return []
  }

  static async mergeEnvFile(variables: EnvVar[]): Promise<void> {
    const { envFileName } = await loadShelveConfig(false)

    s.start(`Merging ${envFileName} file`)
    const envFile = await this.getEnvFile()
    envFile.push(...variables)

    const content = this.formatEnvContent(envFile)
    FileService.write(envFileName, content)
    s.stop(`Merging ${envFileName} file`)
  }

  static async createEnvFile(input: CreateEnvFileInput): Promise<void> {
    const { envFileName, variables, confirmChanges } = input

    if (confirmChanges)
      await askBoolean(`Are you sure you want to update ${envFileName} file?`)

    try {
      s.start(`Creating ${envFileName} file`)
      const content = this.formatEnvContent(variables)

      if (FileService.exists(envFileName)) FileService.delete(envFileName)

      FileService.write(envFileName, content)
      s.stop(`Creating ${envFileName} file`)
    } catch (error) {
      ErrorHandler.handleCancel(`Failed to create ${envFileName} file`)
    }
  }

  static async getEnvVariables(projectId: number, environmentId: number): Promise<EnvVar[]> {
    const api = await this.getApi()

    return useSpinner('Fetching variables', () => {
      // const query = teamId ? `?teamId=${teamId}` : ''
      return api(`/variables/project/${projectId}/${environmentId}`)
    })
  }

  static async pushEnvFile(input: PushEnvFileInput): Promise<void> {
    const { variables, projectId, environment, confirmChanges, autoUppercase } = input
    if (confirmChanges)
      await askBoolean(`Are you sure you want to push ${ variables.length } variables to ${ environment.name } environment?`)

    const api = await this.getApi()

    await useSpinner('Pushing variables', async () => {
      try {
        const body: CreateVariablesInput = {
          projectId,
          autoUppercase,
          environmentIds: [environment.id],
          variables: variables.map((variable) => ({
            key: variable.key,
            value: variable.value
          }))
        }
        await api(`/variables`, { method: 'POST', body })
      } catch (e) {
        ErrorHandler.handleCancel('Failed to push variables')
      }
    })
  }

  static async generateEnvExampleFile(): Promise<void> {
    const { envFileName } = await loadShelveConfig(false)
    const envExampleFile = `${envFileName}.example`

    s.start(`Generating ${envExampleFile} file`)

    try {
      const variables = await this.getEnvFile()
      const keys = variables.map((variable) => variable.key)

      fs.writeFileSync(envExampleFile, `# Generated by Shelve CLI\n${keys.map((key) => `${key}=your_value`).join('\n')}`)
      s.stop(`Generating ${envExampleFile} file`)
    } catch (e) {
      ErrorHandler.handleCancel(`Failed to generate ${envExampleFile} file`)
    }
  }

}
